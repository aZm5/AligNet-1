library(AligNet)
edges1 = matrix(c(
"85962.HP0109", "85962.HP0136",
"85962.HP0109", "85962.HP0137",
"85962.HP0136", "85962.HP0247",
"85962.HP0136", "85962.HP0303",
"85962.HP0137", "85962.HP0247",
"85962.HP0137", "85962.HP0853",
"85962.HP0247", "85962.HP1316"
), ncol=2, byrow=TRUE)
hpy <- read.network(edges1, mode="edges")
plot(hpy)
edges2= matrix(c(
"DBP2_YEAST", "RL2A_YEAST",
"HAS1_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "DBP2_YEAST",
"NOP10_YEAST", "HAS1_YEAST",
"NOP10_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "RL2A_YEAST",
"TSA1_YEAST", "HSP7F_YEAST",
"TSA1_YEAST", "TSA2_YEAST"
), ncol=2, byrow=TRUE)
sce <- read.network(edges2,mode="edges")
plot(sce)
data(Sim1)
data(Sim2)
Dis1 = compute.matrix(net1=hpy)
Dis2 = compute.matrix(net1=sce)
Sim1 = (Sim1+Dis1)/2
Sim2 = (Sim2+Dis2)/2
clust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)
clusters1 = extract.clusters(Net=hpy,ClustMat=clust1)
names(clusters1)=colnames(Sim1)
print(names(clusters1))
for(i in 1:length(clusters1)){
print(names(clusters1)[i])
plot(clusters1[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust1,Net=hpy,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
clust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)
clusters2 = extract.clusters(Net=sce,ClustMat=clust2)
names(clusters2)=colnames(Sim2)
for(i in 1:length(clusters2)){
print(names(clusters2)[i])
plot(clusters2[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust2,Net=sce,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
data(Sim)
localAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)
localAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)
# scores = size.score.all(localAligns=localAligns)
# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)
# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])
alinGlobal = align.global(localAligns=localAligns,Sim=Sim)
alinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)
global = c()
als = unlist(unlist(localAligns,recursive=FALSE),recursive=FALSE)
scores = compute.score(als, Sim)
scores
als
compute.score
library(AligNet)
edges1 = matrix(c(
"85962.HP0109", "85962.HP0136",
"85962.HP0109", "85962.HP0137",
"85962.HP0136", "85962.HP0247",
"85962.HP0136", "85962.HP0303",
"85962.HP0137", "85962.HP0247",
"85962.HP0137", "85962.HP0853",
"85962.HP0247", "85962.HP1316"
), ncol=2, byrow=TRUE)
hpy <- read.network(edges1, mode="edges")
plot(hpy)
edges2= matrix(c(
"DBP2_YEAST", "RL2A_YEAST",
"HAS1_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "DBP2_YEAST",
"NOP10_YEAST", "HAS1_YEAST",
"NOP10_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "RL2A_YEAST",
"TSA1_YEAST", "HSP7F_YEAST",
"TSA1_YEAST", "TSA2_YEAST"
), ncol=2, byrow=TRUE)
sce <- read.network(edges2,mode="edges")
plot(sce)
data(Sim1)
data(Sim2)
Dis1 = compute.matrix(net1=hpy)
Dis2 = compute.matrix(net1=sce)
Sim1 = (Sim1+Dis1)/2
Sim2 = (Sim2+Dis2)/2
clust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)
clusters1 = extract.clusters(Net=hpy,ClustMat=clust1)
names(clusters1)=colnames(Sim1)
print(names(clusters1))
for(i in 1:length(clusters1)){
print(names(clusters1)[i])
plot(clusters1[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust1,Net=hpy,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
clust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)
clusters2 = extract.clusters(Net=sce,ClustMat=clust2)
names(clusters2)=colnames(Sim2)
for(i in 1:length(clusters2)){
print(names(clusters2)[i])
plot(clusters2[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust2,Net=sce,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
data(Sim)
localAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)
localAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)
# scores = size.score.all(localAligns=localAligns)
# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)
# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])
alinGlobal = align.global(localAligns=localAligns,Sim=Sim)
alinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)
global = c()
als = unlist(unlist(localAligns,recursive=FALSE),recursive=FALSE)
scores = compute.score(als, Sim)
als2
als2=als
Sim
blasts = sim.score.all(als2,Sim)
tamanys = size.score.all(als2)
score = tamanys
score[,3]=as.numeric(score[,3])/max(as.numeric(score[,3]))
library(AligNet)
library(AligNet)
edges1 = matrix(c(
"85962.HP0109", "85962.HP0136",
"85962.HP0109", "85962.HP0137",
"85962.HP0136", "85962.HP0247",
"85962.HP0136", "85962.HP0303",
"85962.HP0137", "85962.HP0247",
"85962.HP0137", "85962.HP0853",
"85962.HP0247", "85962.HP1316"
), ncol=2, byrow=TRUE)
hpy <- read.network(edges1, mode="edges")
plot(hpy)
edges2= matrix(c(
"DBP2_YEAST", "RL2A_YEAST",
"HAS1_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "DBP2_YEAST",
"NOP10_YEAST", "HAS1_YEAST",
"NOP10_YEAST", "MAK5_YEAST",
"NOP10_YEAST", "RL2A_YEAST",
"TSA1_YEAST", "HSP7F_YEAST",
"TSA1_YEAST", "TSA2_YEAST"
), ncol=2, byrow=TRUE)
sce <- read.network(edges2,mode="edges")
plot(sce)
data(Sim1)
data(Sim2)
Dis1 = compute.matrix(net1=hpy)
Dis2 = compute.matrix(net1=sce)
Sim1 = (Sim1+Dis1)/2
Sim2 = (Sim2+Dis2)/2
clust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)
clusters1 = extract.clusters(Net=hpy,ClustMat=clust1)
names(clusters1)=colnames(Sim1)
print(names(clusters1))
for(i in 1:length(clusters1)){
print(names(clusters1)[i])
plot(clusters1[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust1,Net=hpy,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
clust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)
clusters2 = extract.clusters(Net=sce,ClustMat=clust2)
names(clusters2)=colnames(Sim2)
for(i in 1:length(clusters2)){
print(names(clusters2)[i])
plot(clusters2[[i]])
}
par(oma=c(3,3,4,3))
display.clusters(clust=clust2,Net=sce,main="")
cols=c("yellow","black","red","green")
legend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty="n",xpd=TRUE,cex=3)
data(Sim)
localAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)
localAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)
# scores = size.score.all(localAligns=localAligns)
# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)
# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])
alinGlobal = align.global(localAligns=localAligns,Sim=Sim)
alinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)
for(glob in alinGlobal[[1]]){
print(EC.score(alin=glob,net1=hpy,net2=sce))
}
for(glob in alinGlobal2[[1]]){
print(EC.score(alin=glob,net1=hpy,net2=sce))
}
EC.score(alin=alinGlobal[[2]],net1=hpy,net2=sce)
EC.score(alin=alinGlobal2[[2]],net1=hpy,net2=sce)
align.plot(net1=hpy,net2=sce,global=alinGlobal2[[2]],k1=1,k2=1,edge.curved=0.5,vertex.size=5)
library(AligNet)
t1 = proc.time()
data(sce)
data(dme)
net1 = simplify(read.network(dme,mode="edges"))
net2 = simplify(read.network(sce,mode="edges"))
t2 = proc.time()
net1
nn1 = decompose.graph(net1)
nn1[[1]]
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
nn1
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
nn1
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
ecount(nn1)
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE)รง)
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
ecount(nn1)
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
ecount(nn1)
while(ecount(nn1)<10000){
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
if(ecount(nn1)>ecount(aux)){
aux=nn1
print(ecount(aux))
}
}
aux=nn1
while(ecount(nn1)<10000){
nn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))
if(ecount(nn1)>ecount(aux)){
aux=nn1
print(ecount(aux))
}
}
aux
decompose.graph(aux)[[1]]
net1 = decompose.graph(aux)[[1]]
decompose.graph(net2)[[1]]
net1
while(ecount(nn1)<10000){
nn1 = induced.subgraph(net2, sample(V(net2),1000,FALSE))
if(ecount(nn1)>ecount(aux)){
aux=nn1
print(ecount(aux))
}
}
decompose.graph(aux)[[1]]
a
a
a
a
a
a
a
library(AligNet)
library(AligNet)
library(devtools)
install.packages("devtools")
install.packages('rversions')
install.packages("xml2")
install.packages("xml2")
install.packages("devtools")
install.packages('rversions')
install.packages("devtools")
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(AligNet)
devtools::document()
devtools::check()
roxygen2::namespace_roclet()
devtools::check()
devtools::check()
devtools::check()
library(AligNet)
alias()
help(package="AligNet")
library(AligNet)
