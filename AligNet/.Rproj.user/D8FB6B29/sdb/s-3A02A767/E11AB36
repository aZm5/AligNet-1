{
    "contents" : "## ----,echo=FALSE, results='hide'-----------------------------------------\nlibrary(knitr)\n\n\n## ----,warning=FALSE------------------------------------------------------\nlibrary(PINTAS)\n\n## ----networks------------------------------------------------------------\nt1 = proc.time()\nnet1 = simplify(read.network(\"cel.tab\",mode=\"edges\",sep=\"\\t\"))\nnet2 = simplify(read.network(\"hsa.tab\",mode=\"edges\",sep=\"\\t\"))\nt2 = proc.time()\n\n\n## ----matrices------------------------------------------------------------\nt3 = proc.time()\n\nblast.net1 = read.matrix(\"celBlast.tab\",mode=\"col3\")\nblast.net2 = read.matrix(\"hsaBlast.tab\",mode=\"col3\")\n\nblast.net1.net2 = read.matrix(\"celhsaBlast.tab\",mode=\"col3\")\n\n\ndis1 = compute.matrix(net1)\ndis2 = compute.matrix(net2)\n\nt4 = proc.time()\n\n## ----adapt---------------------------------------------------------------\nt5 = proc.time()\nblast1 = matrix(0, nrow = vcount(net1), ncol = vcount(net1))\ndimnames(blast1) = list(V(net1)$name,V(net1)$name)\nprots1r = intersect(V(net1)$name, rownames(blast.net1))\nprots1c = intersect(V(net1)$name, colnames(blast.net1))\nfor(p1 in prots1r){\nblast1[p1,prots1c] = blast.net1[p1,prots1c]\n}\nrm(blast.net1)\nblast2 = matrix(0, nrow = vcount(net2), ncol = vcount(net2))\ndimnames(blast2) = list(V(net2)$name,V(net2)$name)\nprots2r = intersect(V(net2)$name, rownames(blast.net2))\nprots2c = intersect(V(net2)$name, colnames(blast.net2))\nfor(p2 in prots2r){\nblast2[p2,prots2c] = blast.net2[p2,prots2c]\n}\nrm(blast.net2)\n\nblast = matrix(0, nrow = vcount(net1), ncol = vcount(net2))\ndimnames(blast) = list(V(net1)$name,V(net2)$name)\nprots1 = intersect(V(net1)$name, rownames(blast.net1.net2))\nprots2 = intersect(V(net2)$name, colnames(blast.net1.net2))\nfor(p1 in prots1){\nblast[p1,prots2] = blast.net1.net2[p1,prots2]\n}\nrm(blast.net1.net2)\n\nblast1=blast1/max(blast1)\nblast2=blast2/max(blast2)\nblast = blast/max(blast)\nt6 = proc.time()\n\n## ----clusters------------------------------------------------------------\nt7 = proc.time()\nsigma1 = (as.matrix(blast1)+dis1)/2\nq31 = fivenum(sigma1)[3]\nclust1 = cluster.network(sigma1,q31,20)\nclusters1 = extract.clusters(net1,clust1)\nnames(clusters1)=V(net1)$name\n\nsigma2 = (as.matrix(blast2)+dis2)/2\nq32 = fivenum(sigma2)[3]\nclust2 = cluster.network(sigma2,q32,20)\nclusters2 = extract.clusters(net2,clust2)\nnames(clusters2)=V(net2)$name\nt8 = proc.time()\n\n\n## ----localalign----------------------------------------------------------\nt17=proc.time()\nlocalAligns = align.local.all(clusters1,clusters2,blast,0,cores=2,1-blast)\nt18=proc.time()\n\n## ----globalalign---------------------------------------------------------\nt19=proc.time()\nblasts = sim.score.all(localAligns,blast)\ntamanys = size.score.all(localAligns)\nscore = tamanys\nscore[,2]=as.numeric(score[,2])/max(as.numeric(score[,2]))\nscore[,2] = as.numeric(score[,2]) + as.numeric(blasts[,2])/max(as.numeric(blasts[,2]))\nglobal = align.global(localAligns,score)\nt20=proc.time()\n\n## ----ECscore-------------------------------------------------------------\nt21 = proc.time()\nprint(EC.score(global[[1]],net1,net2))\n\nprint(EC.score(global[[2]],net1,net2))\nt22=proc.time()\n\n## ----FCscore-------------------------------------------------------------\nt23 = proc.time()\ndata(gos2)\n\nprint(FC.score(global[[1]],gos2))\n\nprint(FC.score(global[[2]],gos2))\nt24 = proc.time()\n\n\n## ----temps, echo=FALSE---------------------------------------------------\nread.networks = t2[3]-t1[3]\ncompute.matrices = t4[3]-t3[3]\nadapt.matrices = t6[3]-t5[3]\ncompute.clusters = t8[3]-t7[3]\ncompute.local.align = t18[3]-t17[3]\ncompute.global.align = t20[3]-t19[3]\ncompute.ec.score = t22[3]-t21[3]\ncompute.fc.score = t24[3]-t23[3]\n\ntimes = c(read.networks,compute.matrices,adapt.matrices, \n          compute.clusters,compute.local.align,\n          compute.global.align,compute.ec.score,\n          compute.fc.score)\ntimes.names = c(\"read.networks\",\"compute.matrices\",\n                \"adapt.matrices\",\"compute.clusters\", \n                \"compute.local.align\",\n                \"compute.global.align\",\"compute.ec.score\",\n                \"compute.fc.score\")\ntimes.table = cbind(times.names,times)\n\nprepare.data = sum(times[1:3])\ncompute.clusters = times[4]\ncompute.local = times[5]\ncompute.global = times[6]\ncompute.all = sum(times[4:6])\ncompute.times = c(prepare.data,compute.clusters,\n                  compute.local,compute.global,compute.all)\ncompute.times.names = c(\"prepare.data\",\"compute.clusters\",\n                  \"compute.local\",\"compute.global\",\n                  \"compute.all\")\ncompute.times.table = cbind(compute.times.names,compute.times)\n\n## ----tempstable----------------------------------------------------------\ntimes.table\n\ncompute.times.table\n\n\nsave(global,file=\"global-cel-hsa.RData\")\n\nsave(times.table, file = \"times-table-cel-hsa.RData\")\n\nsave(localAligns, file = \"local-cel-hsa.RData\")\n",
    "created" : 1447492435405.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "601736837",
    "id" : "E11AB36",
    "lastKnownWriteTime" : 1432459650,
    "path" : "~/MEGAsync/Investigaci√≥/Barcelona/testBass/cel-hsa.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}