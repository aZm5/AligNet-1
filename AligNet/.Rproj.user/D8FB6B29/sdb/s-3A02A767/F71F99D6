{
    "contents" : "library(AligNet)\nedges1 = matrix(c(\n\"85962.HP0109\", \"85962.HP0136\",\n\"85962.HP0109\", \"85962.HP0137\",\n\"85962.HP0136\", \"85962.HP0247\",\n\"85962.HP0136\", \"85962.HP0303\",\n\"85962.HP0137\", \"85962.HP0247\",\n\"85962.HP0137\", \"85962.HP0853\",\n\"85962.HP0247\", \"85962.HP1316\"\n), ncol=2, byrow=TRUE)\nhpy <- read.network(edges1, mode=\"edges\")\nplot(hpy)\nedges2= matrix(c(\n\"DBP2_YEAST\", \"RL2A_YEAST\",\n\"HAS1_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"DBP2_YEAST\",\n\"NOP10_YEAST\", \"HAS1_YEAST\",\n\"NOP10_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"RL2A_YEAST\",\n\"TSA1_YEAST\", \"HSP7F_YEAST\",\n\"TSA1_YEAST\", \"TSA2_YEAST\"\n), ncol=2, byrow=TRUE)\nsce <- read.network(edges2,mode=\"edges\")\nplot(sce)\ndata(Sim1)\ndata(Sim2)\nDis1 = compute.matrix(net1=hpy)\nDis2 = compute.matrix(net1=sce)\nSim1 = (Sim1+Dis1)/2\nSim2 = (Sim2+Dis2)/2\nclust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)\nclusters1 = extract.clusters(Net=hpy,ClustMat=clust1)\nnames(clusters1)=colnames(Sim1)\nprint(names(clusters1))\nfor(i in 1:length(clusters1)){\nprint(names(clusters1)[i])\nplot(clusters1[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust1,Net=hpy,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\nclust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)\nclusters2 = extract.clusters(Net=sce,ClustMat=clust2)\nnames(clusters2)=colnames(Sim2)\nfor(i in 1:length(clusters2)){\nprint(names(clusters2)[i])\nplot(clusters2[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust2,Net=sce,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\ndata(Sim)\nlocalAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)\nlocalAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)\n# scores = size.score.all(localAligns=localAligns)\n# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)\n# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])\nalinGlobal = align.global(localAligns=localAligns,Sim=Sim)\nalinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)\nglobal = c()\nals = unlist(unlist(localAligns,recursive=FALSE),recursive=FALSE)\nscores = compute.score(als, Sim)\nscores\nals\ncompute.score\nlibrary(AligNet)\nedges1 = matrix(c(\n\"85962.HP0109\", \"85962.HP0136\",\n\"85962.HP0109\", \"85962.HP0137\",\n\"85962.HP0136\", \"85962.HP0247\",\n\"85962.HP0136\", \"85962.HP0303\",\n\"85962.HP0137\", \"85962.HP0247\",\n\"85962.HP0137\", \"85962.HP0853\",\n\"85962.HP0247\", \"85962.HP1316\"\n), ncol=2, byrow=TRUE)\nhpy <- read.network(edges1, mode=\"edges\")\nplot(hpy)\nedges2= matrix(c(\n\"DBP2_YEAST\", \"RL2A_YEAST\",\n\"HAS1_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"DBP2_YEAST\",\n\"NOP10_YEAST\", \"HAS1_YEAST\",\n\"NOP10_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"RL2A_YEAST\",\n\"TSA1_YEAST\", \"HSP7F_YEAST\",\n\"TSA1_YEAST\", \"TSA2_YEAST\"\n), ncol=2, byrow=TRUE)\nsce <- read.network(edges2,mode=\"edges\")\nplot(sce)\ndata(Sim1)\ndata(Sim2)\nDis1 = compute.matrix(net1=hpy)\nDis2 = compute.matrix(net1=sce)\nSim1 = (Sim1+Dis1)/2\nSim2 = (Sim2+Dis2)/2\nclust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)\nclusters1 = extract.clusters(Net=hpy,ClustMat=clust1)\nnames(clusters1)=colnames(Sim1)\nprint(names(clusters1))\nfor(i in 1:length(clusters1)){\nprint(names(clusters1)[i])\nplot(clusters1[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust1,Net=hpy,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\nclust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)\nclusters2 = extract.clusters(Net=sce,ClustMat=clust2)\nnames(clusters2)=colnames(Sim2)\nfor(i in 1:length(clusters2)){\nprint(names(clusters2)[i])\nplot(clusters2[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust2,Net=sce,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\ndata(Sim)\nlocalAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)\nlocalAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)\n# scores = size.score.all(localAligns=localAligns)\n# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)\n# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])\nalinGlobal = align.global(localAligns=localAligns,Sim=Sim)\nalinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)\nglobal = c()\nals = unlist(unlist(localAligns,recursive=FALSE),recursive=FALSE)\nscores = compute.score(als, Sim)\nals2\nals2=als\nSim\nblasts = sim.score.all(als2,Sim)\ntamanys = size.score.all(als2)\nscore = tamanys\nscore[,3]=as.numeric(score[,3])/max(as.numeric(score[,3]))\nlibrary(AligNet)\nlibrary(AligNet)\nedges1 = matrix(c(\n\"85962.HP0109\", \"85962.HP0136\",\n\"85962.HP0109\", \"85962.HP0137\",\n\"85962.HP0136\", \"85962.HP0247\",\n\"85962.HP0136\", \"85962.HP0303\",\n\"85962.HP0137\", \"85962.HP0247\",\n\"85962.HP0137\", \"85962.HP0853\",\n\"85962.HP0247\", \"85962.HP1316\"\n), ncol=2, byrow=TRUE)\nhpy <- read.network(edges1, mode=\"edges\")\nplot(hpy)\nedges2= matrix(c(\n\"DBP2_YEAST\", \"RL2A_YEAST\",\n\"HAS1_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"DBP2_YEAST\",\n\"NOP10_YEAST\", \"HAS1_YEAST\",\n\"NOP10_YEAST\", \"MAK5_YEAST\",\n\"NOP10_YEAST\", \"RL2A_YEAST\",\n\"TSA1_YEAST\", \"HSP7F_YEAST\",\n\"TSA1_YEAST\", \"TSA2_YEAST\"\n), ncol=2, byrow=TRUE)\nsce <- read.network(edges2,mode=\"edges\")\nplot(sce)\ndata(Sim1)\ndata(Sim2)\nDis1 = compute.matrix(net1=hpy)\nDis2 = compute.matrix(net1=sce)\nSim1 = (Sim1+Dis1)/2\nSim2 = (Sim2+Dis2)/2\nclust1 = cluster.network(sigma=Sim1,lambda=0.2,k=5)\nclusters1 = extract.clusters(Net=hpy,ClustMat=clust1)\nnames(clusters1)=colnames(Sim1)\nprint(names(clusters1))\nfor(i in 1:length(clusters1)){\nprint(names(clusters1)[i])\nplot(clusters1[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust1,Net=hpy,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\nclust2 = cluster.network(sigma=Sim2,lambda=0.2,k=5)\nclusters2 = extract.clusters(Net=sce,ClustMat=clust2)\nnames(clusters2)=colnames(Sim2)\nfor(i in 1:length(clusters2)){\nprint(names(clusters2)[i])\nplot(clusters2[[i]])\n}\npar(oma=c(3,3,4,3))\ndisplay.clusters(clust=clust2,Net=sce,main=\"\")\ncols=c(\"yellow\",\"black\",\"red\",\"green\")\nlegend(x=0,y=1.25,legend=0:3,fill=cols,horiz=TRUE,bty=\"n\",xpd=TRUE,cex=3)\ndata(Sim)\nlocalAligns = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0)\nlocalAligns2 = align.local.all(clust1=clusters1,clust2=clusters2,mat=Sim,threshold=0,cores=1,dismat=1-Sim)\n# scores = size.score.all(localAligns=localAligns)\n# scores2 = sim.score.all(localAligns=localAligns,sim=Sim)\n# scores[,2] = as.numeric(scores[,2])/5+as.numeric(scores2[,2])\nalinGlobal = align.global(localAligns=localAligns,Sim=Sim)\nalinGlobal2 = align.global(localAligns=localAligns2,Sim=Sim)\nfor(glob in alinGlobal[[1]]){\nprint(EC.score(alin=glob,net1=hpy,net2=sce))\n}\nfor(glob in alinGlobal2[[1]]){\nprint(EC.score(alin=glob,net1=hpy,net2=sce))\n}\nEC.score(alin=alinGlobal[[2]],net1=hpy,net2=sce)\nEC.score(alin=alinGlobal2[[2]],net1=hpy,net2=sce)\nalign.plot(net1=hpy,net2=sce,global=alinGlobal2[[2]],k1=1,k2=1,edge.curved=0.5,vertex.size=5)\nlibrary(AligNet)\nt1 = proc.time()\ndata(sce)\ndata(dme)\nnet1 = simplify(read.network(dme,mode=\"edges\"))\nnet2 = simplify(read.network(sce,mode=\"edges\"))\nt2 = proc.time()\nnet1\nnn1 = decompose.graph(net1)\nnn1[[1]]\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\nnn1\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\nnn1\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\necount(nn1)\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE)รง)\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\necount(nn1)\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\necount(nn1)\nwhile(ecount(nn1)<10000){\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\nif(ecount(nn1)>ecount(aux)){\naux=nn1\nprint(ecount(aux))\n}\n}\naux=nn1\nwhile(ecount(nn1)<10000){\nnn1 = induced.subgraph(net1, sample(V(net1),1000,FALSE))\nif(ecount(nn1)>ecount(aux)){\naux=nn1\nprint(ecount(aux))\n}\n}\naux\ndecompose.graph(aux)[[1]]\nnet1 = decompose.graph(aux)[[1]]\ndecompose.graph(net2)[[1]]\nnet1\nwhile(ecount(nn1)<10000){\nnn1 = induced.subgraph(net2, sample(V(net2),1000,FALSE))\nif(ecount(nn1)>ecount(aux)){\naux=nn1\nprint(ecount(aux))\n}\n}\ndecompose.graph(aux)[[1]]\na\na\na\na\na\na\na\nlibrary(AligNet)\nlibrary(AligNet)\nlibrary(devtools)\ninstall.packages(\"devtools\")\ninstall.packages('rversions')\ninstall.packages(\"xml2\")\ninstall.packages(\"xml2\")\ninstall.packages(\"devtools\")\ninstall.packages('rversions')\ninstall.packages(\"devtools\")\nlibrary(devtools)\ndevtools::document()\ndevtools::document()\ndevtools::document()\ndevtools::document()\nlibrary(AligNet)\ndevtools::document()\ndevtools::check()\nroxygen2::namespace_roclet()\ndevtools::check()\ndevtools::check()\ndevtools::check()\nlibrary(AligNet)\nalias()\nhelp(package=\"AligNet\")\nlibrary(AligNet)\n",
    "created" : 1447778789274.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3296173596",
    "id" : "F71F99D6",
    "lastKnownWriteTime" : 1447696179,
    "path" : "~/PaquetPintas/AligNet/.Rhistory",
    "project_path" : ".Rhistory",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_history"
}